@model Clinika.Models.DatabaseObject.Treatment

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Treatment</h4>
        <hr />
        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.VoterId, new { @class = "control-label col-md-2" })

            <div class="col-md-10">
                @Html.EditorFor(model => model.VoterId)
                @Html.ValidationMessageFor(model => model.VoterId)
            </div>

            <div class="col-md-offset-2 col-md-10">
                <button type="button" class="btn btn-default" id="show">Show Details</button>

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address)
                @Html.ValidationMessageFor(model => model.Address)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfBirht, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfBirht)
                @Html.ValidationMessageFor(model => model.DateOfBirht)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ServiceGiven, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ServiceGiven)
                @Html.ValidationMessageFor(model => model.ServiceGiven)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Observation, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Observation)
                @Html.ValidationMessageFor(model => model.Observation)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Date, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Date)
                @Html.ValidationMessageFor(model => model.Date)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DoctorId, "DoctorId", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("DoctorId", String.Empty)
                @Html.ValidationMessageFor(model => model.DoctorId)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DiseasesId, "DiseasesId", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("DiseasesId", String.Empty)
                @Html.ValidationMessageFor(model => model.DiseasesId)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MedicineId, "MedicineId", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("MedicineId", String.Empty)
                @Html.ValidationMessageFor(model => model.MedicineId)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DoseId, "DoseId", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("DoseId", String.Empty)
                @Html.ValidationMessageFor(model => model.DoseId)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MealId, "MealId", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("MealId", String.Empty)
                @Html.ValidationMessageFor(model => model.MealId)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.QuantityGiven, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QuantityGiven)
                @Html.ValidationMessageFor(model => model.QuantityGiven)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Note, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Note)
                @Html.ValidationMessageFor(model => model.Note)
            </div>
        </div>
        <table id="s"></table>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section Scripts {
    <script>
        $(document).ready(function () {

            $("#Message").hide();
            $("#warning").hide();
            $("#show").click(function () {


                var nm;
                $.ajax({
                    type: "POST",
                    url: "http://nerdcastlebd.com/web_service/voterdb/index.php/voters/voter/5644309456813",
                    dataType: "xml",
                    success: function (xml) {

                        var xmlDoc = $.parseXML(xml);

                        $(xmlDoc).find('voter').each(function () {
                            nm = $(this).find('name').text();
                            alert(nm);
                        });
                    }
                });
                //$.get("http://nerdcastlebd.com/web_service/voterdb/index.php/voters/voter/5644309456813", function(d) {
                //    $('body').append('<h1> Recommended Web Development Books </h1>');
                //    $('body').append('<dl />');

                //    $(d).find('voter').each(function() {

                //        var $voter = $(this);
                //        var name = $voter.attr("name").text();
                //        var id = $voter.find('id').text();
                //        var address = $voter.attr('address').text();

                //        var html = '<dt> <img class="bookImage" alt="" src="' + address + '" /> </dt>';
                //        html += '<dd> <span class="loadingPic" alt="Loading" />';
                //        html += '<p class="title">' + name + '</p>';
                //        html += '<p> ' + id + '</p>';
                //        html += '</dd>';

                //        $('dl').append($(html));

                //        $('.loadingPic').fadeOut(1400);
                //    });
                //});

            });


            //$("#show").click(function() {
            //    alert("bhuiyan");

            //    $.ajax({
            //        type: "get",
            //        url: "http://nerdcastlebd.com/web_service/voterdb/index.php/voters/voter/5644309456813",
            //        dataType: "xml",
            //        success: function(data) {
            //            $(data).find('voter').each(function () {
            //                alert("bhuiyan");
            //            });

            //        }
            //    });
            //});
        });
    </script>
    @*//$.ajax({
        //    type: "GET",
        //    url: "http://nerdcastlebd.com/web_service/voterdb/index.php/voters/voter/5644309456813",
        //    datatype: "xml",
        //    success: function (xml) {
        //        alert("xml");
        //        $(xml).find('voter').each(function () {
        //            $(this).find("id").each(function () {
        //                var name = $(this).text();
        //                alert(name);
        //            });
        //        });
        //    }
        //});
        //return false;
        //    });
        //});

        //function xmlParser(xml) {
        //    $('#voter').fadeOut();
        //    $(xml).find("voter").each(function() {
        //        $("#Name").append($(this).find("name").text());
        //        $(".voter").fadeIn(1000);
        //        });
        //}*@

}
